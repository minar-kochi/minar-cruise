// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = [ "driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// add description 
//
model Payments {
  id            String    @id @default(cuid())
  totalAmount   Int
  advancePaid   Int
  discount      Int
  modeOfPayment String
  Booking       Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())
}

model Booking {
  id            String @id @default(cuid())
  numOfChildren Int
  numOfAdults   Int
  numOfBaby     Int
  description   String @db.Text()

  //Change this to schedule (Schedules are tied up with the Booking.)
  paymentsId String
  payment    Payments @relation(fields: [paymentsId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  Events     Events[]

  @@index([userId]) // For user's bookings queries
  @@index([scheduleId]) // For schedule-based queries
  @@index([paymentsId]) // For payment lookups
  @@index([createdAt]) // For date-based filtering
  @@index([userId, createdAt]) // Composite for user's recent bookings
}

model User {
  id       String    @id @default(cuid())
  name     String
  email    String?
  contact  String?
  bookings Booking[]

  @@index([email]) // For login/lookup by email
  @@index([contact]) // If used for contact-based lookups
}

model FoodMenu {
  id      String    @id @default(cuid())
  name    String
  Package Package[]
}

enum SCHEDULED_TIME {
  BREAKFAST
  LUNCH
  SUNSET
  DINNER
  CUSTOM
}

enum SCHEDULE_STATUS {
  BLOCKED //single button value change
  MAINTENANCE // removed.
  EXCLUSIVE // if the package is exclusive
  AVAILABLE // if common package and online user's are searchable.
}

model Schedule {
  id              String          @id @default(cuid())
  day             DateTime        @db.Date()
  fromTime        String?
  toTime          String?
  packageId       String?
  schedulePackage SCHEDULED_TIME
  scheduleStatus  SCHEDULE_STATUS
  Package         Package?        @relation(fields: [packageId], references: [id])
  Booking         Booking[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())

  @@index([day]) // Essential for date-based queries
  @@index([packageId]) // For package-schedule relationships
  @@index([scheduleStatus]) // For filtering by status
  @@index([day, scheduleStatus]) // Composite for available schedules on specific days
  @@index([packageId, day]) // For package availability queries
}

model Amenities {
  id          String    @id @default(cuid())
  description String[]
  Package     Package[]
}

enum PACKAGE_CATEGORY {
  BREAKFAST
  LUNCH
  SUNSET
  DINNER
  EXCLUSIVE
  CUSTOM
}

model Package {
  id              String           @id @default(cuid())
  title           String
  packageType     String
  description     String
  childPrice      Int
  adultPrice      Int
  amenitiesId     String
  duration        Int
  slug            String           @unique
  foodMenuId      String
  fromTime        String
  toTime          String
  amenities       Amenities        @relation(fields: [amenitiesId], references: [id], onDelete: Cascade)
  food            FoodMenu         @relation(fields: [foodMenuId], references: [id], onDelete: Cascade)
  packageCategory PACKAGE_CATEGORY
  Schedule        Schedule[]
  packageImage    PackageImage[]
  PackageSeo      PackageSeo[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt @default(now())

  @@index([slug, id])
  @@index([packageCategory]) // For filtering by category
  @@index([packageType]) // If used for filtering
  @@index([adultPrice]) // For price-based sorting/filtering
  @@index([childPrice]) // For price-based sorting/filtering
}

enum IMAGE_USE {
  PROD_FEATURED
  PROD_THUMBNAIL
  COMMON
}

enum PROCESSING_STATUS {
  PROCESSING
  FAILED
  SUCCESS
}

model Events {
  id                    String            @id @unique @default(cuid())
  eventId               String
  description           String?
  FailedCount           Int
  status                PROCESSING_STATUS
  lastProcessingAttempt DateTime
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt @default(now())
  payload               Json?
  metadata              Json?

  booking   Booking? @relation(fields: [bookingId], references: [id])
  bookingId String?

  @@index([eventId])
  @@index([status]) // For filtering by processing status
  @@index([createdAt]) // For time-based queries
  @@index([status, createdAt]) // For recent failed events, etc.
}

model Image {
  id           String         @id @unique @default(cuid())
  fileKey      String
  url          String
  alt          String
  ImageUse     IMAGE_USE[]    @default([COMMON])
  packageImage PackageImage[]
  Blog         Blog[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt @default(now())

  @@index([fileKey]) // For file-based lookups
  @@index([ImageUse]) // For filtering by usage type
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

model Blog {
  id         String     @id @default(cuid())
  author     String
  title      String
  blogSlug   String     @unique
  shortDes   String     @db.Text
  content    String     @db.Text
  image      Image      @relation(fields: [imageId], references: [id], onDelete: Restrict)
  imageId    String
  banner     String?
  blogStatus BlogStatus
  BlogSeo    BlogSeo[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt @default(now())

  @@index([blogSlug])
  @@index([blogStatus])
  @@index([author])
  @@index([createdAt])
  @@index([blogStatus, createdAt])
}

model PackageImage {
  id        String    @id @unique @default(cuid())
  packageId String
  ImageUse  IMAGE_USE @default(COMMON)
  imageId   String
  package   Package   @relation(fields: [packageId], references: [id], onDelete: Cascade)
  image     Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@index([packageId])
  @@index([ImageUse])
  @@index([packageId, ImageUse])
}

model Seo {
  id             String       @id @default(cuid())
  title          String
  description    String
  keywords       String[]
  canonicalUrl   String
  ogTitle        String
  ogDescription  String
  ogImage        String
  structuredData Json
  metaRobots     String
  PackageSeo     PackageSeo[]
  BlogSeo        BlogSeo[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt @default(now())
}

model PackageSeo {
  id        String   @id @unique @default(cuid())
  seoId     String
  seo       Seo      @relation(fields: [seoId], references: [id])
  packageId String
  package   Package  @relation(fields: [packageId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model BlogSeo {
  id        String   @id @unique @default(cuid())
  seoId     String
  seo       Seo      @relation(fields: [seoId], references: [id])
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}
