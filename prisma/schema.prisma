// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_POOLED")
  directUrl = env("DIRECT_URL")
}

// add description 
//
model Payments {
  id            String    @id @default(cuid())
  totalAmount   Int
  advancePaid   Int
  discount      Int
  modeOfPayment String
  Booking       Booking[]
}

model Booking {
  id            String @id @default(cuid())
  numOfChildren Int
  numOfAdults   Int
  numOfBaby     Int
  description   String @db.Text()

  //Change this to schedule (Schedules are tied up with the Booking.)
  paymentsId String
  payment    Payments @relation(fields: [paymentsId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model User {
  id       String    @id @default(cuid())
  name     String
  email    String?
  contact  String?
  bookings Booking[]
}

model FoodMenu {
  id      String    @id @default(cuid())
  name    String
  Package Package[]
}

enum SCHEDULED_TIME {
  BREAKFAST
  LUNCH
  SUNSET
  DINNER
  CUSTOM
}

enum SCHEDULE_STATUS {
  BLOCKED //single button value change
  MAINTENANCE // removed.
  EXCLUSIVE // if the package is exclusive
  AVAILABLE // if common package and online user's are searchable.
}

model Schedule {
  id              String          @id @default(cuid())
  day             DateTime        @db.Date() 
  fromTime        String?
  toTime          String?
  packageId       String?
  schedulePackage SCHEDULED_TIME
  scheduleStatus  SCHEDULE_STATUS
  Package         Package?        @relation(fields: [packageId], references: [id])
  Booking         Booking[]
}

model Amenities {
  id          String    @id @default(cuid())
  description String[]
  Package     Package[]
}

enum PACKAGE_CATEGORY {
  BREAKFAST
  LUNCH
  SUNSET
  DINNER
  EXCLUSIVE
  CUSTOM
}

model Package {
  id              String           @id @default(cuid())
  title           String
  packageType     String
  description     String
  childPrice      Int
  adultPrice      Int
  amenitiesId     String
  duration        Int
  slug            String           @unique
  foodMenuId      String
  fromTime        String
  toTime          String
  createdAt       DateTime         @default(now()) @db.Timestamp()
  amenities       Amenities        @relation(fields: [amenitiesId], references: [id])
  food            FoodMenu         @relation(fields: [foodMenuId], references: [id])
  packageCategory PACKAGE_CATEGORY
  Schedule        Schedule[]
  packageImage    PackageImage[]
  PackageSeo      PackageSeo[]
}

enum IMAGE_USE {
  PROD_FEATURED
  PROD_THUMBNAIL
  COMMON
}

enum PROCESSING_STATUS {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model Events {
  id          String            @id @unique @default(cuid())
  eventId     String
  description String?
  FailedCount Int
  status      PROCESSING_STATUS
}

model Image {
  id           String         @id @unique @default(cuid())
  fileKey      String
  url          String
  alt          String
  ImageUse     IMAGE_USE[]    @default([COMMON])
  packageImage PackageImage[]
  Blog         Blog[]
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

model Blog {
  id         String     @id @default(cuid())
  author     String
  title      String
  blogSlug   String     @unique
  shortDes   String     @db.Text
  content    String     @db.Text
  image      Image      @relation(fields: [imageId], references: [id])
  imageId    String
  banner     String?
  blogStatus BlogStatus
  createdAt  DateTime   @default(now())
  BlogSeo    BlogSeo[]

  @@index([blogSlug])
}

model PackageImage {
  id        String      @id @unique @default(cuid())
  packageId String
  ImageUse  IMAGE_USE @default(COMMON)
  imageId   String
  package   Package     @relation(fields: [packageId], references: [id])
  image     Image       @relation(fields: [imageId], references: [id])
}

// @TODO: URGENT :- Add FileKey and update the UploadThingURL with the uploadThing FileKey  
// pg_dump -U postgres --clean | pg_restore -U postgres

model Seo {
  id             String       @id @default(cuid())
  title          String
  description    String
  keywords       String[]
  canonicalUrl   String
  ogTitle        String
  ogDescription  String
  ogImage        String
  structuredData Json
  metaRobots     String
  PackageSeo     PackageSeo[]
  BlogSeo        BlogSeo[]
}

model PackageSeo {
  id        String  @id @unique @default(cuid())
  seoId     String
  seo       Seo     @relation(fields: [seoId], references: [id])
  packageId String
  package   Package @relation(fields: [packageId], references: [id])
}

model BlogSeo {
  id     String @id @unique @default(cuid())
  seoId  String
  seo    Seo    @relation(fields: [seoId], references: [id])
  blogId String
  blog   Blog   @relation(fields: [blogId], references: [id])
}
