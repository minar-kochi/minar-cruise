import type { Metadata } from "next";
import { Toaster } from "react-hot-toast";
import "./globals.css";
import { Inter as FontSans, Inter } from "next/font/google";
import { cn, getUTCDate, RemoveTimeStampFromDate } from "@/lib/utils";
import Providers from "@/context/TrpcProvider";
import Navbar from "@/components/navbar/Navbar";
import Footer from "@/components/footer/Footer";
import MenuBar from "@/components/admin/navigationLayout/MenuBar";
import Header from "@/components/admin/navigationLayout/Header";
import HeaderNav from "@/components/admin/navigationLayout/HeaderNav";
import StoreProvider from "@/providers/adminStore/StoreProvider";
import { getOrganizedPackages } from "@/db/data/dto/package";
import {
  getSchedulesByDateOrNow,
  getUpcommingScheduleDates,
  TgetUpcommingScheduleDates,
} from "@/db/data/dto/schedule";
import { convertScheduleDataDateToDateString } from "@/lib/helpers/organizedData";
import { revalidateTag } from "next/cache";
import { ORGANIZED_PACKAGE_KEY } from "@/constants/CacheKeys/package";
import { Suspense } from "react";
import InitialStateDispatcher from "@/wrapper/admin/Schedule/initial-state-dispatcher";
import CustomAlertDialog from "@/components/custom/CustomAlertDialog";

const fontSans = FontSans({
  subsets: ["latin"],
  variable: "--font-sans",
});

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
export const dynamic = "force-dynamic";

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const packages = await getOrganizedPackages();
  if (!packages) return null;
  return (
    <html lang="en">
      <body
        className={cn(
          "dark min-h-screen bg-background font-sans antialiased",
          fontSans.variable,
        )}
      >
        <div className="grid min-h-screen w-full md:grid-cols-[220px_1fr] lg:grid-cols-[280px_1fr]">
          <MenuBar />
          <Header>
            <Toaster />
            {/* <CustomAlertDialog alertProps="gte"/> */}
            <Providers>
              <Suspense fallback={"Loading.... stuff"}>
                <InitialStateDispatcher>{children}</InitialStateDispatcher>
              </Suspense>
            </Providers>
          </Header>
        </div>
      </body>
    </html>
  );
}
